#!/bin/sh

# PRE-COMMIT HOOK
#
# The pre-commit hook is invoked before a Subversion txn is
# committed.  Subversion runs this hook by invoking a program
# (script, executable, binary, etc.) named 'pre-commit' (for which
# this file is a template), with the following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] TXN-NAME     (the name of the txn about to be committed)
#
#   [STDIN] LOCK-TOKENS ** the lock tokens are passed via STDIN.
#
#   If STDIN contains the line "LOCK-TOKENS:\n" (the "\n" denotes a
#   single newline), the lines following it are the lock tokens for
#   this commit.  The end of the list is marked by a line containing
#   only a newline character.
#
#   Each lock token line consists of a URI-escaped path, followed
#   by the separator character '|', followed by the lock token string,
#   followed by a newline.
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# If the hook program exits with success, the txn is committed; but
# if it exits with failure (non-zero), the txn is aborted, no commit
# takes place, and STDERR is returned to the client.   The hook
# program can use the 'svnlook' utility to help it examine the txn.
#
# On a Unix system, the normal procedure is to have 'pre-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
#   ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#   ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#
#   This is why we recommend using the read-only 'svnlook' utility.
#   In the future, Subversion may enforce the rule that pre-commit
#   hooks should not modify the versioned data in txns, or else come
#   up with a mechanism to make it safe to do so (by informing the
#   committing client of the changes).  However, right now neither
#   mechanism is implemented, so hook writers just have to be careful.
#
# Note that 'pre-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'pre-commit.bat' or 'pre-commit.exe',
# but the basic idea is the same.
#
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# /usr/share/subversion/hook-scripts, and in the repository at
# http://svn.apache.org/repos/asf/subversion/trunk/tools/hook-scripts/ and
# http://svn.apache.org/repos/asf/subversion/trunk/contrib/hook-scripts/

#set -xe

REPOS="$1"
TXN="$2"

TRAC_ENV="/home/trac/t/"
LOG=`/usr/bin/svnlook log -t "$TXN" "$REPOS"`

SVNLOOK="/usr/bin/svnlook"

# Descomente as duas linhas abaixo do comentário para 
# desabilitar as verificações para o usuário administrador
# Cuidado: Ao descomentar, todos os commits de administrador não serão validados

# $SVNLOOK author $REPOS -t $TXN | grep "^administrador$" 
# if $?==0 ; then exit 0


# não é permitido Commit no diretório tags 
# U - mudança de arquivos
# D - remoção de arquivos
$SVNLOOK changed -t "$TXN" "$REPOS" | egrep "^(U|D)[[:space:]]*tags\/" && /bin/echo '\n\nNão é possível alterar/remover uma tag!\n\n' 1>&2 && exit 1


# Valida Codificação de Caracteres 
ISO=""
# teste de codificação de arquivos 
# -n true if the lenght of string is non-zero
# ISO terá somente os arquivos que foram adicionados ou atualizados e que tiverem codificação iso-8859-1
#
ARQS=$(svnlook changed -t "$TXN" "$REPOS"  | egrep "^(A|U)" | sed "s/^[A|U][[:space:]]*//" | egrep -v "/$")
D=`mktemp`
ISO=$(for i in $ARQS; do  
	    svnlook cat -t "$TXN" "$REPOS" $i > $D ; 
     	FISO="";
    	FISO=$(file -bi $D | grep iso); 
    	if [ -n "$FISO" ] ; then
    	   echo $i $FISO;
    	fi;
      done)
rm $D;

if [ -n "$ISO" ]; then echo "\nOs seguintes arquivos possuem codificação ISO-8859-1 e não podem ser comitados:\n\n$ISO\n\n" 1>&2 && exit 2; fi

# Bloqueia o arquivo dependendo de sua extensão
/usr/bin/python $REPOS/hooks/bloqueia_extensao.py "$REPOS" "$TXN" || exit 3

# Valida o tamanho da mensagem
MIN_LOG=30
# Make sure that the log message contains some text.
LOGMSG=$($SVNLOOK log -t "$TXN" "$REPOS" | sed "s/[- $,.?*-+#@%:;|_&)(~^\t'}={]//g" | wc -c )
if [ "$LOGMSG" -lt $MIN_LOG ]
then
echo "\nPor Favor Respeite o TAMANHO MÍNIMO de $MIN_LOG caracteres para o comentário do commit.\n(espaços e pontuação são ignorados)\nSua mensagem atual contém $LOGMSG caracteres.\n" >&2 && exit 4
fi

# Valida mensagem de commit com ticket no trac
#/usr/bin/python $REPOS/hooks/trac-pre-commit-hook "$TRAC_ENV" "$LOG" || exit 1

## Make sure that the log message contains some text.
#SVNLOOK=/usr/bin/svnlook
#$SVNLOOK log -t "$TXN" "$REPOS" | \
#   grep "[a-zA-Z0-9]" > /dev/null || exit 1
#
## Exit on all errors.
#set -e
#
## Check that the author of this commit has the rights to perform
## the commit on the files and directories being modified.
#"$REPOS"/hooks/commit-access-control.pl "$REPOS" $TXN \
#  "$REPOS"/hooks/commit-access-control.cfg
#
## All checks passed, so allow the commit.
exit 0
